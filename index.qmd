---
title: "But It Works on My Machine..."
subtitle: |
  Creating Reusable Compute Environments for Research and Teaching
  ![](img/qr-code.png){height="350"}
format:
  revealjs:
    smaller: true
    theme: [default, custom.scss]
    css: styles.css
    #navigation-mode: grid
    slide-number: true

    footer: >
      Daniel Chen.
      [SSC 2025](https://ssc.ca/en/meetings/annual/2025-ssc-annual-meeting-saskatoon).
      <https://github.com/chendaniely/ssc-2025-reusable_compute_envs>

    # generate token here: https://reveal-multiplex.glitch.me/
    multiplex:
      secret: '17482981036363397299'
      id: 'aec88102bc66c401'


editor:
  render-on-save: true
---

# The scenario

<!--TODO: fix QR code URL for multiplex-->

## R

CRAN: <https://cran.r-project.org/>

![](img/download-r.png){.img-shadow}

## RStudio

Install RStudio: <https://posit.co/download/rstudio-desktop/>

![](img/rstudio.png)

## Positron (Beta)

<https://positron.posit.co/>

![](img/positron.png){height="500"}

## You start an analysis

. . .

```r
library(tidyverse)
```

. . .

<br>
Oh! but you don't have it installed (or want to update)

. . .

```r
install.packages('tidyverse')
```

. . .

<br>
Now you need to read in Qualtrics data

. . .

```r
install.packages('qualtRics')
```

. . .

<br>
now you need data to make [reprexes](https://reprex.tidyverse.org/) (reproducible examples)

. . .

```r
install.packages('palmerpenguins')
```

. . .

<br>
Now you can begin...

. . .

```r
library(tidyverse)      # data cleaning
library(qualtRics)      # loading your data
library(palmerpenguins) # creating examples to debug code
```

## Now you need more packages

. . .

```r
install.packages(c('GGally', 'tidymodels'))
```

. . .

<br>
and more...

. . .

```r
install.packages('censored')
```

## Now R updates...

- You update R...
- But what about your packages? what if you don't want to update R?
- Do you update everything and re-run your code and hope nothing breaks?

- What if you didn't update but you have a new team member who has latest?

- What if this isn't an analysis, but a Package?
  - Your packages _must_ work with current and `devel` versions of R

## What can go wrong?

- Example: `{dplyr}` reverse imports (i.e., packages that import `{dplyr}`)

![](img/dplyr-reverse_imports.png){.img-shadow}


## Dependency hell

:::: {.columns}

::: {.column width="60%"}
![](img/definition-dependency_hell.png){.img-shadow}
:::

::: {.column width="40%"}
- At any given time all packages in CRAN work and build together
- But package and function behaviors can still change
:::

::::


# Tooling Solutions

# Package Management

## Package versions: `{renv}`

`{renv}`: <https://rstudio.github.io/renv/articles/renv.html>

![](img/logo-renv.svg)

## `{renv}`
- Your R packages only exist in 1 system library for each version of R.

![](img/renv-overview.png){.img-shadow}

- `install.packages()` or `renv::install()` will both work

## `renv::init()`

- Turns current working directory / project into an `renv` environment

```bash
$ Rscript -e "renv::init()"
The following package(s) will be updated in the lockfile:

# CRAN -----------------------------------------------------------------------
- renv   [* -> 1.1.4]

The version of R recorded in the lockfile will be updated:
- R      [* -> 4.5.0]

- Lockfile written to "~/temp/ssc-renv/renv.lock".
```

Files created

```bash
$ ls -aF
./  ../  renv/  renv.lock  .Rprofile
```

## `.Rprofile`

- This file runs every time R starts^[<https://rstats.wtf/r-startup.html> ]
  - Looks first in the current working directory
  - Then looks for `~/.Rprofile`
  - Finally in system location (.`Rprofile.site`)

- `renv` creates a `.Rprofile` in your current working directory

```bash
$ cat .Rprofile
source("renv/activate.R")
```

## `./renv/`

- Contains everything to load up the `renv` environment.
- Typically will not need to do anything in here
- Your `renv` installed packages will be installed in the `library/` directory

```bash
$ ls -aF
./  ../  activate.R  .gitignore  library/  settings.json
```

## `libPaths()`

- Order of locations (i.e., paths) where R will look for installed packages.

Normally:

```{.bash code-line-numbers="1,2"}
> .libPaths()
[1] "/home/dan/R/x86_64-pc-linux-gnu-library/4.5"
[2] "/usr/lib/R/library"
```

With `{renv}` enabled:

```{.bash code-line-numbers="2,3"}
.- Project '~/temp/ssc-renv' loaded. [renv 1.1.4]
> .libPaths()
[1] "/home/dan/temp/ssc-renv/renv/library/linux-arch-rolling/R-4.5/x86_64-pc-linux-gnu"
[2] "/home/dan/.cache/R/renv/sandbox/linux-arch-rolling/R-4.5/x86_64-pc-linux-gnu/9a444a72"
```

## `renv.lock` {footer=false}

- A "lock" file will list all the packages, its version, installation location, and its dependencies

`renv.lock` for just `{tidyverse}`

```bash
$ wc -l renv.lock
4090 renv.lock
```

```{.bash code-block-height="200px"}
{{< include includes/renv.lock >}}
```

## `install.packages()` / `renv::install()`

- Install your packages link you normally do.

:::{.callout-important}
You have to actually **USE** your package.
Just installing it will not be picked up by `renv::snapshot()`.

This is literally the first FAQ,
"Why isn't my package being snapshotted into the lockfile"?
^[<https://rstudio.github.io/renv/articles/faq.html#why-isnt-my-package-being-snapshotted-into-the-lockfile>]
:::

## `renv::snapshot()`

- Finds packages from `library()` or `package::function()` calls, or in the `DESCRIPTION` file

If you use a package you do not have installed yet it'll try to install it for you

```r
The following required packages are not installed:
- tidyverse
Packages must first be installed before renv can snapshot them.
Use `renv::dependencies()` to see where this package is used in your project.

What do you want to do?

1: Snapshot, just using the currently installed packages.
2: Install the packages, then snapshot.
3: Cancel, and resolve the situation on your own.

Selection: 2
```

## `renv::restore()`

- Updates, downloads, or installs packages from the `renv.lock` file
- Usually if someone else adds new package to the project.


## Summary: `{renv}`

- Use `{renv}` to snapshot all the packages you **use** ^[<https://rstudio.github.io/renv/articles/faq.html#why-isnt-my-package-being-snapshotted-into-the-lockfile>].
  - `DESCRIPTION` or `script.R`
- Not a panacea for reproducibility ^[<https://rstudio.github.io/renv/articles/renv.html#caveats>]
  - Only tracks **R packages**
  - **Does not** help with:
    - R versions (just tracks)
    - Non-R software (e.g., `pandoc` for RMarkdown/Quarto documents, `PROJ` for geocoding)
    - Operating systems, system libraries, compiler versions

# Language Management

## R Versions: `rig`

`rig`: <https://github.com/r-lib/rig>

- `rig` is a system tool (i.e., not an R package) that aims to solve the issue of managing different **versions** of R itself
  - R `4.5.0`, R `4.4.1`, R `4.3.2`, R `4.1.2`, etc...

```{.bash code-line-numbers="1,2,3,4,6,9"}
$ rig --help
rig add        -- install a new R version [alias: install]
rig available  -- List R versions available to install.
rig default    -- print or set default R version [alias: switch]
rig library    -- manage package libraries [alias: lib] (experimental)
rig list       -- list installed R versions [alias: ls]
rig resolve    -- resolve a symbolic R version
rig rm         -- remove R versions [aliases: del, delete, remove]
rig rstudio    -- start RStudio with the specified R version
rig run        -- Run R, an R script or an R project
rig sysreqs    -- manage R-related system libraries and tools (experimental) (macOS)
rig system     -- manage current installations
```

Positron lets you toggle between different R versions in the `R: Select Interpreter` command pallet

## `rig`: list installed

- `rig list` will show all installed versions of R

```bash
$ rig list
* name       version    aliases
------------------------------------------
  4.1-arm64  (R 4.1.3)
  4.2-arm64  (R 4.2.2)
  4.3-arm64  (R 4.3.2)
  4.4-arm64  (R 4.4.2)
* 4.5-arm64  (R 4.5.0)  release
```

- Currently on R 4.5.0

```bash
$ R --version
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
```

## `rig`: switch R version

- `rig default` sets the new default version

```bash
$ rig default 4.1-arm64
```

<br>

```bash
$ R --version
R version 4.1.3 (2022-03-10) -- "One Push-Up"
```

<br>

```bash
$ rig list
* name       version    aliases
------------------------------------------
* 4.1-arm64  (R 4.1.3)
  4.2-arm64  (R 4.2.2)
  4.3-arm64  (R 4.3.2)
  4.4-arm64  (R 4.4.2)
  4.5-arm64  (R 4.5.0)  release
```


## `qvm`: Quarto Version Manager

`qvm`: <https://github.com/dpastoor/qvm>

- Similar to `rig`

```{.bash code-line-numbers="1,5,9,10,11,13"}
$ qvm --help
quarto version manager

Usage:
  qvm [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  debug       debug
  help        Help about any command
  init        initialize qvm
  install     install a given quarto version
  ls          list versions
  path        get the path to the active quarto executable
  rm          remove a version of quarto
  use         use a version of quarto

Flags:
  -h, --help              help for qvm
      --loglevel string   log level (default "info")
  -v, --version           version for qvm

Use "qvm [command] --help" for more information about a command.

```

# System Management

# Docker

## What is Docker?

:::: {.columns}

::: {.column width="20%"}
![](img/docker-logos/SVG/docker-mark-blue.svg)
:::

::: {.column width="80%"}
> If it works on my machine ... let me give you my machine

- Installs everything from scratch
- Share as a container
:::

::::

Challenge - getting an image to work on all platforms:

- (ARM, Intel) x (Windows, Mac, Linux) = 6 combinations

![](img/logo-podman.png){height="200" style="display: block; margin-left: auto;"}

## Do you need Docker?

- Between `renv`, `rig`, and `qvm` you probably can get away with the vast majority of your work.

- If you transition into Docker, you won't need `rig` or `qvm`
  since the non R package versions will be directly installed into the Docker container.

- Docker has its own challenges and complexities if you want to work on your codebase in real-time.
  - Dev Container (VS Code only, Positron ... Soon?)
  - Remote SSH (VS Code + Positron)

- Snapshot everything: copy your code into the container as you build the image

- See Appendix slides for more Docker details

# Automation

# <!-- ... -->
<h1>GitHub Actions <span class="github-spinner"></span></h1>

## What is GitHub Actions?

Platform for:

- Continuous Integration (CI)
- Continuous Deployment/Delivery (CD)

Automations for:

- automated workflows
- **build**, test, and deploy code

## GitHub for Analysis

Changes to the codebase will trigger:

1. Getting the new code
2. Rebuild the compute environment
3. Run all the code

## This Presentation

1. Change the `index.qmd`
2. Push changes to GitHub
3. GitHub Actions will note the changes
4. Changes will trigger a workflow
5. GHA will get the updated code
6. GHA creates a new runner
7. GHA installs all the packages and tools
8. GHA renders the presentation
9. GHA publishes the updated slides to GitHub Pages

## Publishing YAML

```yaml
on:                                                  # 1. Triggers:
  workflow_dispatch:                                 #    manually
  push:                                              #    changes to main branch
    branches: main                                   #

name: Quarto Publish                                 # 2. Name of workflow

jobs:                                                # 3. Jobs to run on trigger
  build-deploy:                                      # 4. Name of job
    runs-on: ubuntu-latest                           # 5. OS to run jobs on (runner)
    permissions:
      contents: write
    steps:                                           # 6. Steps to run during the job
      - name: Check out repository                   # 7. Get the latest code from the repository
        uses: actions/checkout@v4                    #

      - name: Set up Quarto                          # 8. Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2     #

      - name: Render and Publish                     # 9. Render and publish slides to github pages
        uses: quarto-dev/quarto-actions/publish@v2   #
        with:                                        #
          target: gh-pages                           #
        env:                                         #
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  #
```

## GitHub Actions with `renv`

```{.yaml code-line-numbers="8-17"}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.5.0'                        # specify the version of R to use

      - name: Install R Dependencies
        uses: r-lib/actions/setup-renv@v2           # uses the renv.lock fil to install packages
        with:
          cache-version: 1

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```


docs: <https://quarto.org/docs/publishing/github-pages.html#example-knitr-with-renv>


# Python?

## What about Python?

| Task                | R           | Python                                        |
|---------------------|-------------|-----------------------------------------------|
| Version my language | rig         | uv, pyenv, conda                              |
| Version my packages | renv        | requirements.txt, environment.yml, conda.lock |
| Virtual environment | renv        | venv, conda                                   |
| Metadata            | DESCRIPTION | pyproject.toml                                |
|                     |             |                                               |
# UBC Courses

## MDS + Undergrad

- Use GitHub Actions to cleanly build the textbooks on every change.

DSCI 521^[Computing Platforms for Data Science]

  - URL: <https://ubc-mds.github.io/DSCI_521_platforms-dsci_book/>
  - Repo: <https://github.com/UBC-MDS/DSCI_521_platforms-dsci_book>

DSCI 310^[Reproducible and Trustworthy Workflows for Data Science],
DSCI 522^[Data Science Workflows],
DSCI 524^[Collaborative Software Development]

- Reproducible and Trustworthy Workflows for Data Science
  - URL: <https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/>
  - Repo: <https://github.com/UBC-DSCI/reproducible-and-trustworthy-workflows-for-data-science/>


# Give it a try!

## Links! {footer=false}

- Slides: <https://github.com/chendaniely/ssc-2025-reusable_compute_envs>

- Positron IDE: <https://positron.posit.co/>

- DSCI 521: Computing Platforms for Data Science
  - URL: <https://ubc-mds.github.io/DSCI_521_platforms-dsci_book/>
  - Repo: <https://github.com/UBC-MDS/DSCI_521_platforms-dsci_book>

- Reproducible and Trustworthy Workflows for Data Science
  - URL: <https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/>
  - Repo: <https://github.com/UBC-DSCI/reproducible-and-trustworthy-workflows-for-data-science/>

- Font, Atkinson Hyperlegible: <https://www.brailleinstitute.org/freefont/>
- Quarto Multiplex: <https://quarto.org/docs/presentations/revealjs/presenting.html#multiplex>

# Appendix

## RStudio Server in the container

```bash
docker run --rm -ti -e PASSWORD=password -p 8787:8787 rocker/rstudio
```

- Open a web browser and navigate to `localhost:8787`
and you will have access to RStudio in the container
  - User: `rstudio`
  - Password: `password`

## Mount your project folder

- This is the part that is tricky if you are using `renv`
- the `.Rprofile` and `renv/` directory will overwrite whatever has been installed in the container

Create a `docker-compose.yml` file and run it with `docker-compose up -d`

```yaml
services:
  rstudio:
    image: rocker/rstudio:4.5.0
    ports:
      - "8787:8787"
    environment:
      PASSWORD: password
    volumes:
      - ~/workspace:/home/rstudio/workspace
```

## Docker + `renv`

You will need to install all your renv packages into a separate directory,
and then ignore the the locally mounted renv library:

```dockerfile
FROM rocker/rstudio:latest

# Set renv library path inside the container
ENV RENV_PATHS_ROOT=/home/rstudio/renv

# Ensure the renv library directory exists
RUN mkdir -p /home/rstudio/renv

# Set working directory
WORKDIR /home/rstudio/renv

# Copy only renv.lock and activate.R first to cache dependency installation
COPY renv.lock renv.lock
COPY renv/activate.R renv/activate.R

# Install renv and restore packages
RUN R -e "install.packages('renv', repos='https://cloud.r-project.org')"
RUN R -e "renv::restore()"
```

See this repo for docker build example: <https://github.com/chendaniely/docker-renv>

## Docker Compose + `renv`

Finally configure renv to only use the installed package library:

```yaml
services:
  docker-renv:
    image: docker-renv
    container_name: docker-renv
    ports:
      - "8787:8787"
    volumes:
      - .:/home/rstudio/work     # Mount everything...
      - /home/rstudio/work/renv  # except the renv directory, ignore that
    environment:
      - RENV_PATHS_ROOT=/home/rstudio/renv    # set the renv root path
      - RENV_CONFIG_AUTOLOADER_ENABLED=FALSE  # disable renv auto load inside the container
      - DISABLE_AUTH=true
      - PASSWORD=password
```

## VS Code + Positron

- Tools for working with containers
- No more RStudio!

## Remote Container Execution

```bash
docker run --rm -ti -e PASSWORD=password -p 8787:8787 rocker/rstudio
```

Install the Docker VS Code extension

![](img/vscode-dev_container.png)

## Remote SSH

<https://positron.posit.co/remote-ssh.html>

![](img/positron-remote_ssh.png)
